-- Daily Challenge: Tables Relationships

											-- Part I

-- Create 2 tables : Customer and Customer profile. They have a One to One relationship.

-- A customer can have only one profile, and a profile belongs to only one customer
-- The Customer table should have the columns : id, first_name, last_name NOT NULL
-- The Customer profile table should have the columns : id, isLoggedIn DEFAULT false (a Boolean),
-- customer_id (a reference to the Customer table)

	CREATE TABLE customer (
		id serial PRIMARY KEY,
		first_name varchar(100) NOT NULL,
		last_name varchar(100) NOT NULL
	);
	CREATE TABLE customer_profile(
		id serial PRIMARY KEY,
		is_logged_in boolean  DEFAULT false,
		customer_id int,
    	FOREIGN KEY (customer_id)
		REFERENCES customer(id)
	); 
	
	INSERT INTO customer(first_name,last_name)
	VALUES ('John', 'Doe'),
			('Jerome', 'Lalu'),
			('Lea', 'Rive');
			
	INSERT INTO customer_profile(is_logged_in,customer_id)
	VALUES (true,(SELECT id FROM customer
					WHERE first_name = 'John'
					)),
			(false,(SELECT id FROM customer
					WHERE first_name = 'Jerome'
					));
		   
-- Use the relevant types of Joins to display:

-- The first_name of the LoggedIn customers
	SELECT c.first_name FROM customer AS c
		JOIN customer_profile  AS c_p
			ON c.id = c_p.customer_id
	WHERE c_p.is_logged_in = true;
	
-- All the customers first_name and isLoggedIn columns - even the customers those 
-- who donâ€™t have a profile.
	SELECT c.first_name, c_p.is_logged_in FROM customer AS c
		LEFT JOIN customer_profile AS c_p
			ON c.id = c_p.customer_id;
			
-- The number of customers that are not LoggedIn
	SELECT COUNT(1) AS num_customers_not_loggedin FROM customer AS c
	LEFT JOIN customer_profile AS c_p
		ON c.id = c_p.customer_id
			WHERE c_p.is_logged_in IS NULL OR c_p.is_logged_in = false;

									-- Part II:

-- Create a table named Book, with the columns : book_id SERIAL PRIMARY KEY, 
-- title NOT NULL, author NOT NULL

CREATE TABLE book(
	book_id SERIAL PRIMARY KEY,
	title varchar(100) NOT NULL, 
	author varchar(100) NOT NULL
);

-- Insert those books :
-- Alice In Wonderland, Lewis Carroll
-- Harry Potter, J.K Rowling
-- To kill a mockingbird, Harper Lee
INSERT INTO book (title,author)
VALUES ('Alice In Wonderland', 'Lewis Carroll'),
		('Harry Potter', 'J.K Rowling'),
		('To kill a mockingbird', 'Harper Lee');
		
-- Create a table named Student, with the columns : 
-- student_id SERIAL PRIMARY KEY, name NOT NULL UNIQUE, age. Make sure that the age is 
-- never bigger than 15 (Find an SQL method);

CREATE TABLE student(
	student_id SERIAL PRIMARY KEY, 
	name varchar(100) NOT NULL UNIQUE, 
	age int CHECK(age BETWEEN 0 AND 15)
);

-- Insert those students:
-- John, 12
-- Lera, 11
-- Patrick, 10
-- Bob, 14
 INSERT INTO student(name,age)
 VALUES ('John', 12),
 		('Lera', 11),
		('Patrick', 10),
		('Bob', 14);

-- Create a table named Library, with the columns :
-- book_fk_id ON DELETE CASCADE ON UPDATE CASCADE
-- student_id ON DELETE CASCADE ON UPDATE CASCADE
-- borrowed_date
-- This table, is a junction table for a Many to Many relationship with the Book and Student tables : A student can borrow many books, and a book can be borrowed by many children
-- book_fk_id is a Foreign Key representing the column book_id from the Book table
-- student_fk_id is a Foreign Key representing the column student_id from the Student table
-- The pair of Foreign Keys is the Primary Key of the Junction Table

	CREATE TABLE library(
		book_fk_id int ,
			FOREIGN KEY (book_fk_id)
			REFERENCES book(book_id) ON DELETE CASCADE ON UPDATE CASCADE,
		student_id int  ,
			FOREIGN KEY (student_id)
			REFERENCES student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
		borrowed_date date
	);
	
-- Add 4 records in the junction table, use subqueries.
-- the student named John, borrowed the book Alice In Wonderland on the 15/02/2022
-- the student named Bob, borrowed the book To kill a mockingbird on the 03/03/2021
-- the student named Lera, borrowed the book Alice In Wonderland on the 23/05/2021
-- the student named Bob, borrowed the book Harry Potter the on 12/08/2021		
select * from book
select * from student
INSERT INTO library (book_fk_id,student_id,borrowed_date)
VALUES (
			(SELECT book_id FROM book WHERE title = 'Alice In Wonderland'),
			(SELECT student_id FROM student WHERE name = 'John'),
			'2022-02-15'
	),
		(
			(SELECT book_id FROM book WHERE title = 'To kill a mockingbird'),
			(SELECT student_id FROM student WHERE name = 'Bob'),
			'2021-03-03'
	),
		(
			(SELECT book_id FROM book WHERE title = 'Alice In Wonderland'),
			(SELECT student_id FROM student WHERE name = 'Lera'),
			'2021-05-23'
	),
	(
			(SELECT book_id FROM book WHERE title = 'Harry Potter'),
			(SELECT student_id FROM student WHERE name = 'Bob'),
			'2021-08-12'
	);
	
-- Display the data
-- Select all the columns from the junction table
	SELECT * FROM library;
-- Select the name of the student and the title of the borrowed books
	SELECT s.name,b.title FROM library AS l
	JOIN student AS s
		ON s.student_id = l.student_id
	JOIN book AS b
		ON b.book_id = l.book_fk_id;
-- Select the average age of the children, that borrowed the book Alice in Wonderland
select * from student
	SELECT AVG(s.age) FROM student AS s
	JOIN library AS l
		ON s.student_id = l.student_id
	JOIN book AS b
		ON b.book_id = l.book_fk_id
			WHERE b.book_id = 1;
-- Delete a student from the Student table, what happened in the junction table ?
	DELETE FROM student WHERE student_id = 2;
	SELECT * FROM student;
-- 	ðŸŸ¢ A: The corresponding row from the library table was removed as well

